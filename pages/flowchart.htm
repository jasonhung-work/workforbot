<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>檢視流程圖</title>
        <meta name="description" content="Interactive flowchart diagram implemented by GoJS in JavaScript for HTML." />
        <!-- Copyright 1998-2017 by Northwoods Software Corporation. -->
        <meta charset="UTF-8">
        <link href="../css/bootstrap/bootstrap.css" rel="stylesheet" />
        <link href="../css/font-awesome-4.1.0/css/font-awesome.min.css" rel="stylesheet" />
        <script src="../scripts/go.js"></script>
        <script id="code">
            function init() {
              var $ = go.GraphObject.make;  // for conciseness in defining templates
              Diagram =
                $(go.Diagram, "DiagramDiv",  // must name or refer to the DIV HTML element
                  {
                    initialContentAlignment: go.Spot.Center,
                    allowDrop: false,  // must be true to accept drops from the Palette
                    "LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
                    "LinkRelinked": showLinkLabel,
                    "animationManager.duration": 800, // slightly longer than default (600ms) animation
                    "undoManager.isEnabled": true  // enable undo & redo
                  });
              // when the document is modified, add a "*" to the title and enable the "Save" button
              Diagram.addDiagramListener("Modified", function (e) {
                var button = document.getElementById("SaveButton");
                if (button) button.disabled = !Diagram.isModified;
                var idx = document.title.indexOf("*");
                if (Diagram.isModified) {
                  if (idx < 0) document.title += "*";
                } else {
                  if (idx >= 0) document.title = document.title.substr(0, idx);
                }
              });
              // helper definitions for node templates
              function nodeStyle() {
                return [
                  // The Node.location comes from the "loc" property of the node data,
                  // converted by the Point.parse static method.
                  // If the Node.location is changed, it updates the "loc" property of the node data,
                  // converting back using the Point.stringify static method.
                  new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                  {
                    // the Node.location is at the center of each node
                    locationSpot: go.Spot.Center,
                    //isShadowed: true,
                    //shadowColor: "#888",
                    // handle mouse enter/leave events to show/hide the ports
                    mouseEnter: function (e, obj) { showPorts(obj.part, true); },
                    mouseLeave: function (e, obj) { showPorts(obj.part, false); }
                  }
                ];
              }
              // Define a function for creating a "port" that is normally transparent.
              // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
              // and where the port is positioned on the node, and the boolean "output" and "input" arguments
              // control whether the user can draw links from or to the port.
              function makePort(name, spot, output, input) {
                // the port is basically just a small circle that has a white stroke when it is made visible
                return $(go.Shape, "Circle",
                  {
                    fill: "transparent",
                    stroke: null,  // this is changed to "white" in the showPorts function
                    desiredSize: new go.Size(8, 8),
                    alignment: spot, alignmentFocus: spot,  // align the port on the main Shape
                    portId: name,  // declare this object to be a "port"
                    fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
                    fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
                    cursor: "pointer"  // show a different cursor to indicate potential link point
                  });
              }
              // define the Node templates for regular nodes
              var lightText = 'whitesmoke';
              Diagram.nodeTemplateMap.add("",  // the default category
                $(go.Node, "Spot", nodeStyle(),
                  // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                  $(go.Panel, "Auto",
                    $(go.Shape, "Rectangle",
                      { fill: "#00A9C9", stroke: null },
                      new go.Binding("figure", "figure")),
                    $(go.TextBlock,
                      {
                        font: "bold 11pt Helvetica, Arial, sans-serif",
                        stroke: lightText,
                        margin: 8,
                        maxSize: new go.Size(160, NaN),
                        wrap: go.TextBlock.WrapFit,
                        editable: true
                      },
                      new go.Binding("text").makeTwoWay())
                  ),
                  // four named ports, one on each side:
                  makePort("T", go.Spot.Top, false, true),
                  makePort("L", go.Spot.Left, true, true),
                  makePort("R", go.Spot.Right, true, true),
                  makePort("B", go.Spot.Bottom, true, false)
                ));
              Diagram.nodeTemplateMap.add("Start",
                $(go.Node, "Spot", nodeStyle(),
                  $(go.Panel, "Auto",
                    $(go.Shape, "Circle",
                      { minSize: new go.Size(40, 40), fill: "#79C900", stroke: null }),
                    $(go.TextBlock, "Start",
                      { font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
                      new go.Binding("text"))
                  ),
                  // three named ports, one on each side except the top, all output only:
                  makePort("L", go.Spot.Left, true, false),
                  makePort("R", go.Spot.Right, true, false),
                  makePort("B", go.Spot.Bottom, true, false)
                ));
              Diagram.nodeTemplateMap.add("End",
                $(go.Node, "Spot", nodeStyle(),
                  $(go.Panel, "Auto",
                    $(go.Shape, "Circle",
                      { minSize: new go.Size(40, 40), fill: "#DC3C00", stroke: null }),
                    $(go.TextBlock, "End",
                      { font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
                      new go.Binding("text"))
                  ),
                  // three named ports, one on each side except the bottom, all input only:
                  makePort("T", go.Spot.Top, false, true),
                  makePort("L", go.Spot.Left, false, true),
                  makePort("R", go.Spot.Right, false, true)
                ));
              Diagram.nodeTemplateMap.add("Comment",
                $(go.Node, "Auto", nodeStyle(),
                  $(go.Shape, "File",
                    { fill: "#EFFAB4", stroke: null }),
                  $(go.TextBlock,
                    {
                      margin: 5,
                      maxSize: new go.Size(200, NaN),
                      wrap: go.TextBlock.WrapFit,
                      textAlign: "center",
                      editable: true,
                      font: "bold 12pt Helvetica, Arial, sans-serif",
                      stroke: '#454545'
                    },
                    new go.Binding("text").makeTwoWay())
                  // no ports, because no links are allowed to connect with a comment
                ));
              // replace the default Link template in the linkTemplateMap
              Diagram.linkTemplate =
                $(go.Link,  // the whole link panel
                  {
                    routing: go.Link.AvoidsNodes,
                    curve: go.Link.JumpOver,
                    corner: 5, toShortLength: 4,
                    relinkableFrom: true,
                    relinkableTo: true,
                    reshapable: true,
                    resegmentable: true,
                    // mouse-overs subtly highlight links:
                    mouseEnter: function (e, link) { link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)"; },
                    mouseLeave: function (e, link) { link.findObject("HIGHLIGHT").stroke = "transparent"; }
                  },
                  new go.Binding("points").makeTwoWay(),
                  $(go.Shape,  // the highlight shape, normally transparent
                    { isPanelMain: true, strokeWidth: 8, stroke: "transparent", name: "HIGHLIGHT" }),
                  $(go.Shape,  // the link path shape
                    { isPanelMain: true, stroke: "gray", strokeWidth: 2 }),
                  $(go.Shape,  // the arrowhead
                    { toArrow: "standard", stroke: null, fill: "gray" }),
                  $(go.Panel, "Auto",  // the link label, normally not visible
                    { visible: false, name: "LABEL", segmentIndex: 2, segmentFraction: 0.5 },
                    new go.Binding("visible", "visible").makeTwoWay(),
                    $(go.Shape, "RoundedRectangle",  // the label shape
                      { fill: "#F8F8F8", stroke: null }),
                    $(go.TextBlock, "Yes",  // the label
                      {
                        textAlign: "center",
                        font: "10pt helvetica, arial, sans-serif",
                        stroke: "#333333",
                        editable: true
                      },
                      new go.Binding("text").makeTwoWay())
                  )
                );
              // Make link labels visible if coming out of a "conditional" node.
              // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
              function showLinkLabel(e) {
                var label = e.subject.findObject("LABEL");
                if (label !== null) label.visible = (e.subject.fromNode.data.figure === "Diamond");
              }
              // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
              Diagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
              Diagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;
              load();  // load an initial diagram from some JSON text
              // The following code overrides GoJS focus to stop the browser from scrolling
              // the page when either the Diagram or Palette are clicked or dragged onto.
              function customFocus() {
                var x = window.scrollX || window.pageXOffset;
                var y = window.scrollY || window.pageYOffset;
                go.Diagram.prototype.doFocus.call(this);
                window.scrollTo(x, y);
              }
              Diagram.doFocus = customFocus;
            } // end init
            // Make all ports on a node visible when the mouse is over the node
            function showPorts(node, show) {
              var diagram = node.diagram;
              if (!diagram || diagram.isReadOnly || !diagram.allowLink) return;
              node.ports.each(function (port) {
                port.stroke = (show ? "white" : null);
              });
            }
            // Show the diagram's model in JSON format that the user may edit
            function save() {
              document.getElementById("SavedModel").value = Diagram.model.toJson();
              Diagram.isModified = false;
            }
            function load() {
              var Model = {
                "class": "go.GraphLinksModel",
                "linkFromPortIdProperty": "fromPort",
                "linkToPortIdProperty": "toPort",
                "nodeDataArray": [
                  { "key": -1, "category": "Start", "loc": "175 0", "text": "Start" }
                ],
                "linkDataArray": [
                  { "from": -1, "to": 0, "fromPort": "B", "toPort": "T" }
                ]
              };
              var Dialogs = window.opener.Dialogs;
              var left = 175;
              var top;
              for (var idx = 0; idx < Dialogs.length; idx++) {
                if (idx % 6 == 0) {
                  left += 175;
                }
                top = (idx % 6 + 1) * 60;
                Model.nodeDataArray.push({ "key": Dialogs[idx].dialog_id, "text": Dialogs[idx].description, "loc": left + " " + top });
                if (Dialogs[idx].type == 'choice' || Dialogs[idx].type == 'confirm') {
                  for (var idy = 0; idy < Dialogs[idx].prompt.attachments[0].content.buttons.length; idy++) {
                    Model.linkDataArray.push({ "from": Dialogs[idx].dialog_id, "to": Dialogs[idx].prompt.attachments[0].content.buttons[idy].dialog_id, "fromPort": "B", "toPort": "T" });
                  }
                } else if (Dialogs[idx].type == 'condition') {
                } else {
                  Model.linkDataArray.push({ "from": Dialogs[idx].dialog_id, "to": parseInt(Dialogs[idx].next), "fromPort": "B", "toPort": "T" });
                }
              }
              top = (Dialogs.length % 6 + 1) * 60;
              Model.nodeDataArray.push({ "key": -2, "category": "End", "loc": left + " " + top, "text": "End" });
              Model.linkDataArray.push({ "from": Dialogs.length - 1, "to": -2, "fromPort": "B", "toPort": "T" });
              document.getElementById("SavedModel").value = JSON.stringify(Model, null, 4);
              Diagram.model = go.Model.fromJson(Model);
              makeSVG();
              // Diagram.model = go.Model.fromJson(JSON);
            }
            // add an SVG rendering of the diagram at the end of this page
            var scale = 2;
            function makeSVG() {
              if (scale <= 0) {
                scale = 0.5;
              }
              var svg = Diagram.makeSvg({
                scale: scale
              });
              svg.style.border = "0px solid black";
              obj = document.getElementById("SVGArea");
              obj.appendChild(svg);
              if (obj.children.length > 0) {
                obj.replaceChild(svg, obj.children[0]);
              }
            }
        </script>
    </head>
    <body onload="init()">
        <div id="sample" style="display: none">
            <div style="width:100%; white-space:nowrap;">
                <span style="display: inline-block; vertical-align: top; width:80%">
                    <div id="DiagramDiv" style="border: solid 1px black; height: 720px"></div>
                </span>
            </div>
            <button id="SaveButton" onclick="save()">Save</button>
            <button onclick="load()">Load</button> Diagram Model saved in JSON format:
            <textarea id="SavedModel" style="width:100%;height:300px">
            </textarea>
            <p>Click the button below to render the current GoJS Diagram into SVG at one-half scale. The SVG is not interactive like
                the GoJS diagram, but can be used for printing or display. For more information, see the page on <a href="../intro/makingSVG.html">making SVG</a>.
            </p>
            <button onclick="makeSVG()">Render as SVG</button>
        </div>
        
        <button type="button" onclick="makeSVG(scale+=0.5)" title="放大" class="btn btn-success">
            <i class="fa fa-plus"></i>
        </button>
        <button type="button" onclick="makeSVG(scale-=0.5)" title="縮小" class="btn btn-danger">
            <i class="fa fa-minus"></i>
        </button>
        <div id="SVGArea"></div>
    </body>
</html>